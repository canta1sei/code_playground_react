name: Deploy to AWS

on:
  push:
    branches:
      - main # mainブランチへのプッシュでprod環境にデプロイ
      - develop # developブランチへのプッシュでdev環境にデプロイ

env:
  AWS_REGION: ap-northeast-1 # デプロイ先のAWSリージョン

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # OIDC (OpenID Connect) を使用する場合に必要。AWSアクションでは推奨される設定です。
      contents: read  # actions/checkout@v4 など、リポジリポジトリの内容を読み取るアクションに必要です。
    # 環境変数を動的に設定
    env:
      ENV_NAME: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Node.jsのバージョン

      - name: Install Lambda dependencies
        run: npm install
        working-directory: lambda

      - name: Install CDK dependencies
        run: npm install
        working-directory: infra # infraディレクトリで実行

      - name: Deploy CDK Stack
        run: npx cdk deploy -c env=${{ env.ENV_NAME }} --require-approval never --outputs-file cdk-outputs.json
        working-directory: infra
        id: cdk_deploy # ステップにIDを付与して出力を参照できるようにする

      

      - name: Extract CDK Outputs
        id: get_outputs
        run: |
          if [ ! -f cdk-outputs.json ]; then
            echo "Error: cdk-outputs.json not found"
            exit 1
          fi
          
          # Find stack name
          POSSIBLE_STACK_NAMES=(
            "InfraStack-${{ env.ENV_NAME }}"
            "InfraStack${{ env.ENV_NAME }}"
          )
          ACTUAL_STACK_NAME=""
          for stack_name in "${POSSIBLE_STACK_NAMES[@]}"; do
            if jq -e --arg stack "$stack_name" 'has($stack)' cdk-outputs.json > /dev/null 2>&1; then
              ACTUAL_STACK_NAME="$stack_name"
              break
            fi
          done
          
          if [ -z "$ACTUAL_STACK_NAME" ]; then
            echo "Error: Could not find matching stack name in cdk-outputs.json"
            jq -r 'keys[]' cdk-outputs.json
            exit 1
          fi

          # Function to find a value by trying possible keys
          find_output_value() {
            local stack_name=$1
            shift
            local keys=("$@")
            for key in "${keys[@]}"; do
              value=$(jq -r --arg stack "$stack_name" --arg key "$key" '.[$stack][$key] // empty' cdk-outputs.json)
              if [ ! -z "$value" ] && [ "$value" != "null" ]; then
                echo "$value"
                return
              fi
            done
          }

          # Define possible keys
          POSSIBLE_API_KEYS=("ApiEndpoint-${{ env.ENV_NAME }}" "ApiEndpoint${{ env.ENV_NAME }}")
          POSSIBLE_BUCKET_KEYS=("FrontendBucketName-${{ env.ENV_NAME }}" "FrontendBucketName${{ env.ENV_NAME }}")
          POSSIBLE_CLOUDFRONT_ID_KEYS=("CloudFrontDistributionId-${{ env.ENV_NAME }}" "CloudFrontDistributionId${{ env.ENV_NAME }}")
          POSSIBLE_CLOUDFRONT_URL_KEYS=("CloudFrontUrl-${{ env.ENV_NAME }}" "CloudFrontUrl${{ env.ENV_NAME }}")

          # Extract values
          API_ENDPOINT=$(find_output_value "$ACTUAL_STACK_NAME" "${POSSIBLE_API_KEYS[@]}")
          FRONTEND_BUCKET_NAME=$(find_output_value "$ACTUAL_STACK_NAME" "${POSSIBLE_BUCKET_KEYS[@]}")
          CLOUDFRONT_DISTRIBUTION_ID=$(find_output_value "$ACTUAL_STACK_NAME" "${POSSIBLE_CLOUDFRONT_ID_KEYS[@]}")
          CLOUDFRONT_URL=$(find_output_value "$ACTUAL_STACK_NAME" "${POSSIBLE_CLOUDFRONT_URL_KEYS[@]}")

          # Set step outputs
          echo "API_ENDPOINT=$API_ENDPOINT" >> $GITHUB_OUTPUT
          echo "FRONTEND_BUCKET_NAME=$FRONTEND_BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "CLOUDFRONT_DISTRIBUTION_ID=$CLOUDFRONT_DISTRIBUTION_ID" >> $GITHUB_OUTPUT
          echo "CLOUDFRONT_URL=$CLOUDFRONT_URL" >> $GITHUB_OUTPUT
          
          # Print summary
          echo "CDK Outputs for ${{ env.ENV_NAME }}:"
          echo "  Frontend URL: https://$CLOUDFRONT_URL"
          echo "  API Endpoint: $API_ENDPOINT"
          echo "  S3 Bucket: $FRONTEND_BUCKET_NAME"
          echo "  CloudFront ID: $CLOUDFRONT_DISTRIBUTION_ID"
          
          # Validation
          if [ -z "$FRONTEND_BUCKET_NAME" ] || [ -z "$CLOUDFRONT_DISTRIBUTION_ID" ] || [ -z "$CLOUDFRONT_URL" ]; then
            echo "Error: One or more required CDK outputs were not found."
            exit 1
          fi
        working-directory: infra
        working-directory: infra

      - name: Install Frontend dependencies
        run: npm install
        working-directory: frontend

      - name: Build Frontend
        run: |
          echo "Building frontend for ${{ env.ENV_NAME }}..."
          VITE_API_ENDPOINT=${{ steps.get_outputs.outputs.API_ENDPOINT }} npm run build
          echo "Build complete."
        working-directory: frontend

      - name: Deploy Frontend to S3
        run: |
          echo "Deploying to bucket: ${{ steps.get_outputs.outputs.FRONTEND_BUCKET_NAME }}"
          echo "CloudFront distribution: ${{ steps.get_outputs.outputs.CLOUDFRONT_DISTRIBUTION_ID }}"
          
          if [ ! -d dist ]; then
            echo "Error: dist directory not found"
            exit 1
          fi
          
          aws s3 sync dist s3://${{ steps.get_outputs.outputs.FRONTEND_BUCKET_NAME }} --delete
          aws cloudfront create-invalidation --distribution-id ${{ steps.get_outputs.outputs.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
        working-directory: frontend